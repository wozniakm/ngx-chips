{"version":3,"sources":["ng://ngx-chips/core/pipes/highlight.pipe.ts","node_modules/tslib/tslib.es6.js","ng://ngx-chips/core/constants/index.ts","ng://ngx-chips/core/providers/drag-provider.ts","ng://ngx-chips/defaults.ts","ng://ngx-chips/core/providers/options-provider.ts","ng://ngx-chips/core/accessor.ts","ng://ngx-chips/core/helpers/listen.ts","ng://ngx-chips/components/tag-input-form/tag-input-form.component.ts","ng://ngx-chips/components/dropdown/tag-input-dropdown.component.ts","ng://ngx-chips/components/tag/tag-ripple.component.ts","ng://ngx-chips/components/tag/tag.component.ts","ng://ngx-chips/components/tag-input/animations.ts","ng://ngx-chips/components/tag-input/tag-input.ts","ng://ngx-chips/components/icon/icon.ts","ng://ngx-chips/tag-input.module.ts"],"names":["HighlightPipe","prototype","transform","value","arg","trim","regex","RegExp","replace","e","Pipe","args","name","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","call","apply","this","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__read","o","m","r","ar","error","KEYDOWN","ACTIONS_KEYS","KEY_PRESS_ACTIONS","8","37","39","9","DRAG_AND_DROP_KEY","NEXT","PREV","DragProvider","state","dragging","dropping","index","undefined","setDraggedItem","event","tag","dataTransfer","setData","JSON","stringify","getDraggedItem","data","getData","parse","_a","setSender","sender","setReceiver","receiver","onTagDropped","indexDragged","indexDropped","onDragEnd","onRemoveRequested","onAddingRequested","setState","getState","key","Injectable","defaults","tagInput","separatorKeys","separatorKeyCodes","maxItems","Infinity","placeholder","secondaryPlaceholder","validators","asyncValidators","onlyFromAutocomplete","errorMessages","theme","onTextChangeDebounce","inputId","inputClass","clearOnBlur","hideForm","addOnBlur","addOnPaste","pasteSplitPattern","blinkIfDupe","removable","editable","allowDupes","modelAsStrings","trimTags","ripple","tabIndex","disable","dragZone","onRemoving","onAdding","displayBy","identifyBy","animationDuration","enter","leave","dropdown","appendToBody","offset","focusFirstElement","showDropdownIfEmpty","minimumTextLength","limitItemsTo","keepOpen","dynamicUpdate","zIndex","matchingFn","target","targetValue","toString","toLowerCase","indexOf","OptionsProvider","setOptions","options","isObject","obj","TagInputAccessor","_items","defineProperty","items","_onChangeCallback","onTouched","_onTouchedCallback","writeValue","registerOnChange","fn","registerOnTouched","getItemValue","item","fromDropdown","property","getItemDisplay","getItemsWithout","filter","position","Input","listen","listenerType","action","condition","listeners","Error","TagInputForm","onSubmit","EventEmitter","onBlur","onFocus","onKeyup","onKeydown","inputTextChange","tabindex","disabled","FormControl","text","setValue","emit","ngOnInit","setValidators","setAsyncValidators","form","FormGroup","ngOnChanges","changes","firstChange","currentValue","controls","enable","get","isInputFocused","doc","document","activeElement","input","nativeElement","getErrorMessages","messages","_this","keys","err","hasError","map","hasErrors","dirty","valid","focus","blur","getElementPosition","getBoundingClientRect","destroy","parentElement","removeChild","onKeyDown","$event","inputText","submit","onKeyUp","preventDefault","Component","selector","template","Output","ViewChild","forwardRef","TagInputDropdown","injector","TagInputComponent","_autocompleteItems","show","maxItemsReached","getFormValue","hasMinimumText","calculatePosition","getMatchingItems","hasItems","isHidden","isVisible","isDisabled","shouldShow","shouldHide","autocompleteObservable","getItemsFromObservable","hide","setItems","requestAdding","createTagModel","catch","resetItems","setLoadingState","pipe","first","subscribe","populateItems","onItemClicked","onHide","KEEP_OPEN","onTextChange","asObservable","debounceTime","updatePosition","inputForm","menu","menuState","dropdownState","selectedItem","scrollListener","onWindowBlur","formValue","display","dupesAllowed","autocompleteItems","hasValue","tags","some","model","slice","isLoading","Injector","Ng2Dropdown","ContentChildren","TemplateRef","HostListener","TagRipple","animations","trigger","style","width","opacity","transition","animate","keyframes","borderRadius","navigator","window","userAgent","vendor","isChrome","test","TagComponent","element","renderer","cdRef","onSelect","onRemove","onTagEdited","editing","rippleState","readonly","select","stopPropagation","remove","move","moving","keydown","keyCode","disableEditMode","blink","classList","add","setTimeout","toggleEditMode","activateEditMode","onBlurred","innerText","getDisplayValue","hasRipple","getContentEditableText","storeNewValue","detectChanges","setContentEditableText","isDeleteIconVisible","getContentEditable","canAddTag","querySelector","ElementRef","Renderer2","ChangeDetectorRef","HostBinding","CUSTOM_ACCESSOR","DragEvent","provide","NG_VALUE_ACCESSOR","useExisting","multi","_super","dragProvider","onAdd","onPaste","onValidationError","constants.KEYDOWN","inputTextValue","errors","appendTag","__spread","concat","createTag","val","isTagValid","fromAutocomplete","dupe","findDupe","find","isFromAutocomplete","assertions","Boolean","onPasteCallback","isIE","clipboardData","type","getText","requests","split","setInputValue","resetInput","all","__extends","__","constructor","create","tslib_1.__extends","ngAfterViewInit","setUpKeypressListeners","setupSeparatorKeysListener","setUpInputKeydownListeners","observers","setUpTextChangeSubscriber","setUpOnBlurSubscriber","setUpOnPasteListener","statusChanges$","statusChanges","status","isProgressBarVisible$","console","warn","setAnimationMetadata","subscribeFn","removeItem","giveupFocus","addItem","selectItem","selectedTag","fireEvents","eventName","forEach","listener","handleKeydown","which","shiftKey","constants.KEY_PRESS_ACTIONS","constants.ACTIONS_KEYS","moveToTag","constants.PREV","constants.NEXT","isFirstTag","isLastTag","onFormSubmit","_b","emitEvent","getControl","applyFocus","displayAutocomplete","hasCustomTemplate","templates","menuTemplate","onDragStarted","zone","onDragOver","isDropping","isReceiver","onTagBlurred","changedElement","trackBy","updateEditedTag","direction","isLast","isFirst","getTagIndex","getTagAtIndex","last","toArray","findIndex","reset","appendItem","statusUpdate","useSeparatorKeys","hasKeyCode","hasKey","isIMEProcessing","valueChanges","id","animationMetadata","params","providers","animations$1","ContentChild","descendants","ViewChildren","DeleteIconComponent","optionsProvider","TagInputModule","withDefaults","NgModule","imports","CommonModule","ReactiveFormsModule","FormsModule","Ng2DropdownModule","declarations","exports","COMPOSITION_BUFFER_MODE","useValue"],"mappings":"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","sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\n\nconst escape = s => s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n@Pipe({\n    name: 'highlight'\n})\nexport class HighlightPipe implements PipeTransform {\n    /**\n     * @name transform\n     * @param value {string}\n     * @param arg {string}\n     */\n    public transform(value: string, arg: string): string {\n        if (!arg.trim()) {\n            return value;\n        }\n\n        try {\n            const regex = new RegExp(`(${escape(arg)})`, 'i');\n            return value.replace(regex, '<b>$1</b>');\n        } catch (e) {\n            return value;\n        }\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*\n** constants and default values for <tag-input>\n */\n\nexport const PLACEHOLDER = '+ Tag';\nexport const SECONDARY_PLACEHOLDER = 'Enter a new tag';\nexport const KEYDOWN = 'keydown';\nexport const KEYUP = 'keyup';\nexport const FOCUS = 'focus';\nexport const MAX_ITEMS_WARNING = 'The number of items specified was greater than the property max-items.';\n\nexport const ACTIONS_KEYS = {\n    DELETE: 'DELETE',\n    SWITCH_PREV: 'SWITCH_PREV',\n    SWITCH_NEXT: 'SWITCH_NEXT',\n    TAB: 'TAB'\n};\n\nexport const KEY_PRESS_ACTIONS = {\n    8: ACTIONS_KEYS.DELETE,\n    37: ACTIONS_KEYS.SWITCH_PREV,\n    39: ACTIONS_KEYS.SWITCH_NEXT,\n    9: ACTIONS_KEYS.TAB\n};\n\nexport const DRAG_AND_DROP_KEY = 'Text';\nexport const NEXT = 'NEXT';\nexport const PREV = 'PREV';\n\n","import { TagInputComponent } from '../../components/tag-input/tag-input';\nimport { TagModel } from '../accessor';\n\nimport { Injectable } from '@angular/core';\n\nexport declare interface DraggedTag {\n    index: number;\n    tag: TagModel;\n    zone: string;\n}\n\nimport { DRAG_AND_DROP_KEY } from '../../core/constants';\n\nexport declare interface State {\n    dragging: boolean,\n    dropping: boolean,\n    index: number | undefined\n}\n\nexport declare type StateProperty = keyof State;\n\n@Injectable()\nexport class DragProvider {\n    public sender: TagInputComponent;\n    public receiver: TagInputComponent;\n\n    public state: State = {\n        dragging: false,\n        dropping: false,\n        index: undefined\n    };\n\n    /**\n     * @name setDraggedItem\n     * @param event\n     * @param tag\n     */\n    public setDraggedItem(event: DragEvent, tag: DraggedTag): void {\n        event.dataTransfer.setData(DRAG_AND_DROP_KEY, JSON.stringify(tag));\n    }\n\n    /**\n     * @name getDraggedItem\n     * @param event\n     */\n    public getDraggedItem(event: DragEvent): DraggedTag | undefined {\n        const data = event.dataTransfer.getData(DRAG_AND_DROP_KEY);\n\n        try {\n            return JSON.parse(data) as DraggedTag;\n        } catch {\n            return;\n        }\n    }\n\n    /**\n     * @name setSender\n     * @param sender\n     */\n    public setSender(sender: TagInputComponent): void {\n        this.sender = sender;\n    }\n\n    /**\n     * @name setReceiver\n     * @param receiver\n     */\n    public setReceiver(receiver: TagInputComponent): void {\n        this.receiver = receiver;\n    }\n\n    /**\n     * @name onTagDropped\n     * @param tag\n     * @param indexDragged\n     * @param indexDropped\n     */\n    public onTagDropped(tag: TagModel, indexDragged: number, indexDropped?: number): void {\n        this.onDragEnd();\n\n        this.sender.onRemoveRequested(tag, indexDragged);\n        this.receiver.onAddingRequested(false, tag, indexDropped);\n    }\n\n    /**\n     * @name setState\n     * @param state\n     */\n    public setState(state: {[K in StateProperty]?: State[K]}): void {\n        this.state = {...this.state, ...state};\n    }\n\n    /**\n     * @name getState\n     * @param key\n     */\n    public getState(key?: StateProperty): State | State[StateProperty] {\n        return key ? this.state[key] : this.state;\n    }\n\n    /**\n     * @name onDragEnd\n     */\n    public onDragEnd(): void {\n        this.setState({\n            dragging: false,\n            dropping: false,\n            index: undefined\n        });\n    }\n}\n","import { Observable } from 'rxjs';\nimport { ValidatorFn, AsyncValidatorFn } from '@angular/forms';\n\nimport { SECONDARY_PLACEHOLDER, PLACEHOLDER } from './core/constants/index';\nimport { TagInputDropdown } from './components/dropdown/tag-input-dropdown.component';\nimport { TagModel } from './core/accessor';\n\nexport interface TagInputOptions {\n    separatorKeys: string[];\n    separatorKeyCodes: number[];\n    maxItems: number;\n    placeholder: string;\n    secondaryPlaceholder: string;\n    validators: ValidatorFn[];\n    asyncValidators: AsyncValidatorFn[];\n    onlyFromAutocomplete: boolean;\n    errorMessages: { [key: string]: string; };\n    theme: string;\n    onTextChangeDebounce: number;\n    inputId: string | null;\n    inputClass: string;\n    clearOnBlur: boolean;\n    hideForm: boolean;\n    addOnBlur: boolean;\n    addOnPaste: boolean;\n    pasteSplitPattern: string | RegExp;\n    blinkIfDupe: boolean;\n    removable: boolean;\n    editable: boolean;\n    allowDupes: boolean;\n    modelAsStrings: boolean;\n    trimTags: boolean;\n    ripple: boolean;\n    tabIndex: string;\n    disable: boolean;\n    dragZone: string;\n    onRemoving?: (tag: TagModel) => Observable<TagModel>;\n    onAdding?: (tag: TagModel) => Observable<TagModel>;\n    displayBy: string;\n    identifyBy: string;\n    animationDuration: {\n        enter: string,\n        leave: string\n    };\n}\n\nexport interface TagInputDropdownOptions {\n    displayBy: string;\n    identifyBy: string;\n    appendToBody: boolean;\n    offset: string;\n    focusFirstElement: boolean;\n    showDropdownIfEmpty: boolean;\n    minimumTextLength: number;\n    limitItemsTo: number;\n    keepOpen: boolean;\n    zIndex: number;\n    dynamicUpdate: boolean;\n    matchingFn: (value: string, target: TagModel) => boolean;\n}\n\nexport const defaults = {\n    tagInput: <TagInputOptions>{\n        separatorKeys: [],\n        separatorKeyCodes: [],\n        maxItems: Infinity,\n        placeholder: PLACEHOLDER,\n        secondaryPlaceholder: SECONDARY_PLACEHOLDER,\n        validators: [],\n        asyncValidators: [],\n        onlyFromAutocomplete: false,\n        errorMessages: {},\n        theme: '',\n        onTextChangeDebounce: 250,\n        inputId: null,\n        inputClass: '',\n        clearOnBlur: false,\n        hideForm: false,\n        addOnBlur: false,\n        addOnPaste: false,\n        pasteSplitPattern: ',',\n        blinkIfDupe: true,\n        removable: true,\n        editable: false,\n        allowDupes: false,\n        modelAsStrings: false,\n        trimTags: true,\n        ripple: true,\n        tabIndex: '',\n        disable: false,\n        dragZone: '',\n        onRemoving: undefined,\n        onAdding: undefined,\n        displayBy: 'display',\n        identifyBy: 'value',\n        animationDuration: {\n            enter: '250ms',\n            leave: '150ms'\n        }\n    },\n    dropdown: <TagInputDropdownOptions>{\n        displayBy: 'display',\n        identifyBy: 'value',\n        appendToBody: true,\n        offset: '50 0',\n        focusFirstElement: false,\n        showDropdownIfEmpty: false,\n        minimumTextLength: 1,\n        limitItemsTo: Infinity,\n        keepOpen: true,\n        dynamicUpdate: true,\n        zIndex: 1000,\n        matchingFn\n    }\n};\n\n/**\n * @name matchingFn\n * @param this\n * @param value\n * @param target\n */\nfunction matchingFn(this: TagInputDropdown, value: string, target: TagModel): boolean {\n    const targetValue = target[this.displayBy].toString();\n\n    return targetValue && targetValue\n        .toLowerCase()\n        .indexOf(value.toLowerCase()) >= 0;\n}\n","import { defaults, TagInputOptions, TagInputDropdownOptions } from '../../defaults';\n\nexport type Options = {\n    tagInput?: {\n        [P in keyof TagInputOptions]?: TagInputOptions[P];\n    };\n    dropdown?: {\n        [P in keyof TagInputDropdownOptions]?: TagInputDropdownOptions[P];\n    }\n}\n\nexport class OptionsProvider {\n    public static defaults = defaults;\n\n    public setOptions(options: Options): void {\n        OptionsProvider.defaults.tagInput = {...defaults.tagInput, ...options.tagInput};\n        OptionsProvider.defaults.dropdown = {...defaults.dropdown, ...options.dropdown};\n    }\n}\n\nexport { TagInputDropdownOptions, TagInputOptions };","import { ControlValueAccessor } from '@angular/forms';\nimport { Input } from '@angular/core';\nimport { OptionsProvider } from './providers/options-provider';\nimport { TagInputDropdown } from '../components/dropdown/tag-input-dropdown.component';\n\nexport class TagModelClass {\n    [key: string]: any;\n}\n\nexport type TagModel = string | TagModelClass;\n\nexport function isObject(obj: any): boolean {\n    return obj === Object(obj);\n}\n\nexport class TagInputAccessor implements ControlValueAccessor {\n    private _items: TagModel[] = [];\n    private _onTouchedCallback: () => void;\n    private _onChangeCallback: (items: TagModel[]) => void;\n\n    public dropdown: TagInputDropdown;\n\n    /**\n     * @name displayBy\n     */\n    @Input() public displayBy: string = OptionsProvider.defaults.tagInput.displayBy;\n\n    /**\n     * @name identifyBy\n     */\n    @Input() public identifyBy: string = OptionsProvider.defaults.tagInput.identifyBy;\n\n    public get items(): TagModel[] {\n        return this._items;\n    }\n\n    public set items(items: TagModel[]) {\n        this._items = items;\n        this._onChangeCallback(this._items);\n    }\n\n    public onTouched() {\n        this._onTouchedCallback();\n    }\n\n    public writeValue(items: any[]) {\n        this._items = items || [];\n    }\n\n    public registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    public registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @name getItemValue\n     * @param item\n     * @param fromDropdown\n     */\n    public getItemValue(item: TagModel, fromDropdown = false): string {\n        const property = fromDropdown && this.dropdown ? this.dropdown.identifyBy : this.identifyBy;\n        return isObject(item) ? item[property] : item;\n    }\n\n    /**\n     * @name getItemDisplay\n     * @param item\n     * @param fromDropdown\n     */\n    public getItemDisplay(item: TagModel, fromDropdown = false): string {\n        const property = fromDropdown && this.dropdown ? this.dropdown.displayBy : this.displayBy;\n        return isObject(item) ? item[property] : item;\n    }\n\n    /**\n     * @name getItemsWithout\n     * @param index\n     */\n    protected getItemsWithout(index: number): TagModel[] {\n        return this.items.filter((item, position) => position !== index);\n    }\n}\n","\n/**\n * @name listen\n * @param listenerType\n * @param action\n * @param condition\n */\nexport function listen(listenerType: string, action: () => any, condition = true): void {\n    // if the event provided does not exist, throw an error\n    if (!this.listeners.hasOwnProperty(listenerType)) {\n        throw new Error('The event entered may be wrong');\n    }\n\n    // if a condition is present and is false, exit early\n    if (!condition) {\n        return;\n    }\n\n    // fire listener\n    this.listeners[listenerType].push(action);\n}\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild} from '@angular/core';\nimport {AsyncValidatorFn, FormControl, FormGroup, ValidatorFn} from '@angular/forms';\n\n@Component({\n    selector: 'tag-input-form',\n    styleUrls: ['./tag-input-form.style.scss'],\n    templateUrl: './tag-input-form.template.html'\n})\nexport class TagInputForm implements OnInit, OnChanges {\n    /**\n     * @name onSubmit\n     */\n    @Output() public onSubmit: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onBlur\n     */\n    @Output() public onBlur: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onFocus\n     */\n    @Output() public onFocus: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onKeyup\n     */\n    @Output() public onKeyup: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onKeydown\n     */\n    @Output() public onKeydown: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name inputTextChange\n     */\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\n\n    // inputs\n\n    /**\n     * @name placeholder\n     */\n    @Input() public placeholder: string;\n\n    /**\n     * @name validators\n     */\n    @Input() public validators: ValidatorFn[] = [];\n\n    /**\n     * @name asyncValidators\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public asyncValidators: AsyncValidatorFn[] = [];\n\n    /**\n     * @name inputId\n     */\n    @Input() public inputId: string;\n\n    /**\n     * @name inputClass\n     */\n    @Input() public inputClass: string;\n\n    /**\n     * @name tabindex\n     * @desc pass through the specified tabindex to the input\n     */\n    @Input() public tabindex = '';\n\n    /**\n     * @name disabled\n     */\n    @Input() public disabled = false;\n\n    /**\n     * @name input\n     */\n    @ViewChild('input') public input;\n\n    /**\n     * @name form\n     */\n    public form: FormGroup;\n\n    /**\n     * @name inputText\n     */\n    @Input()\n    public get inputText(): string {\n        return this.item.value;\n    }\n\n    /**\n     * @name inputText\n     * @param text {string}\n     */\n    public set inputText(text: string) {\n        this.item.setValue(text);\n\n        this.inputTextChange.emit(text);\n    }\n\n    private readonly item: FormControl = new FormControl({value: '', disabled: this.disabled});\n\n    ngOnInit() {\n        this.item.setValidators(this.validators);\n        this.item.setAsyncValidators(this.asyncValidators);\n\n        // creating form\n        this.form = new FormGroup({\n            item: this.item\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.disabled && !changes.disabled.firstChange) {\n            if (changes.disabled.currentValue) {\n                this.form.controls['item'].disable();\n            } else {\n                this.form.controls['item'].enable();\n            }\n        }\n    }\n\n    /**\n     * @name value\n     */\n    public get value(): FormControl {\n        return this.form.get('item') as FormControl;\n    }\n\n    /**\n     * @name isInputFocused\n     */\n    public isInputFocused(): boolean {\n        const doc = typeof document !== 'undefined' ? document : undefined;\n        return doc ? doc.activeElement === this.input.nativeElement : false;\n    }\n\n    /**\n     * @name getErrorMessages\n     * @param messages\n     */\n    public getErrorMessages(messages: { [key: string]: string }): string[] {\n        return Object.keys(messages)\n            .filter(err => this.value.hasError(err))\n            .map(err => messages[err]);\n    }\n\n    /**\n     * @name hasErrors\n     */\n    public hasErrors(): boolean {\n        const {dirty, value, valid} = this.form;\n        return dirty && value.item && !valid;\n    }\n\n    /**\n     * @name focus\n     */\n    public focus(): void {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * @name blur\n     */\n    public blur(): void {\n        this.input.nativeElement.blur();\n    }\n\n    /**\n     * @name getElementPosition\n     */\n    public getElementPosition(): ClientRect {\n        return this.input.nativeElement.getBoundingClientRect();\n    }\n\n    /**\n     * - removes input from the component\n     * @name destroy\n     */\n    public destroy(): void {\n        const input = this.input.nativeElement;\n        input.parentElement.removeChild(input);\n    }\n\n    /**\n     * @name onKeyDown\n     * @param $event\n     */\n    public onKeyDown($event) {\n        this.inputText = this.value.value;\n        if ($event.key === 'Enter') {\n            this.submit($event);\n\n            this.inputText = '';\n        }\n        return this.onKeydown.emit($event);\n    }\n\n    /**\n     * @name onKeyUp\n     * @param $event\n     */\n    public onKeyUp($event) {\n        this.inputText = this.value.value;\n        return this.onKeyup.emit($event);\n    }\n\n    /**\n     * @name submit\n     */\n    public submit($event: any): void {\n        $event.preventDefault();\n        if (this.form.valid) {\n            this.onSubmit.emit($event);\n        }\n    }\n}\n","import {\n    Component,\n    ContentChildren,\n    EventEmitter,\n    forwardRef,\n    HostListener,\n    Injector,\n    Input,\n    QueryList,\n    TemplateRef,\n    Type,\n    ViewChild,\n} from '@angular/core';\n\n// rx\nimport { Observable } from 'rxjs';\nimport { map, filter, first, debounceTime } from 'rxjs/operators';\n\nimport { Ng2Dropdown, Ng2MenuItem } from 'ng2-material-dropdown';\nimport { OptionsProvider } from '../../core/providers/options-provider';\nimport { TagInputComponent } from '../tag-input/tag-input';\nimport { TagInputDropdownOptions } from '../../defaults';\nimport { TagModel } from '../../core/accessor';\n\nconst defaults: Type<TagInputDropdownOptions> = forwardRef(() => OptionsProvider.defaults.dropdown);\n\n@Component({\n    selector: 'tag-input-dropdown',\n    templateUrl: './tag-input-dropdown.template.html'\n})\nexport class TagInputDropdown {\n    /**\n     * @name dropdown\n     */\n    @ViewChild(Ng2Dropdown) public dropdown: Ng2Dropdown;\n\n    /**\n     * @name menuTemplate\n     * @desc reference to the template if provided by the user\n     */\n    @ContentChildren(TemplateRef) public templates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @name offset\n     */\n    @Input() public offset: string = new defaults().offset;\n\n    /**\n     * @name focusFirstElement\n     */\n    @Input() public focusFirstElement = new defaults().focusFirstElement;\n\n    /**\n     * - show autocomplete dropdown if the value of input is empty\n     * @name showDropdownIfEmpty\n     */\n    @Input() public showDropdownIfEmpty = new defaults().showDropdownIfEmpty;\n\n    /**\n     * @description observable passed as input which populates the autocomplete items\n     * @name autocompleteObservable\n     */\n    @Input() public autocompleteObservable: (text: string) => Observable<any>;\n\n    /**\n     * - desc minimum text length in order to display the autocomplete dropdown\n     * @name minimumTextLength\n     */\n    @Input() public minimumTextLength = new defaults().minimumTextLength;\n\n    /**\n     * - number of items to display in the autocomplete dropdown\n     * @name limitItemsTo\n     */\n    @Input() public limitItemsTo: number = new defaults().limitItemsTo;\n\n    /**\n     * @name displayBy\n     */\n    @Input() public displayBy = new defaults().displayBy;\n\n    /**\n     * @name identifyBy\n     */\n    @Input() public identifyBy = new defaults().identifyBy;\n\n    /**\n     * @description a function a developer can use to implement custom matching for the autocomplete\n     * @name matchingFn\n     */\n    @Input() public matchingFn: (value: string, target: TagModel) => boolean = new defaults().matchingFn;\n\n    /**\n     * @name appendToBody\n     */\n    @Input() public appendToBody = new defaults().appendToBody;\n\n    /**\n     * @name keepOpen\n     * @description option to leave dropdown open when adding a new item\n     */\n    @Input() public keepOpen = new defaults().keepOpen;\n\n    /**\n     * @name dynamicUpdate\n     */\n    @Input() public dynamicUpdate = new defaults().dynamicUpdate;\n\n    /**\n    * @name zIndex\n     */\n    @Input() public zIndex = new defaults().zIndex;\n\n    /**\n     * list of items that match the current value of the input (for autocomplete)\n     * @name items\n     */\n    public items: TagModel[] = [];\n\n    /**\n     * @name tagInput\n     */\n    public tagInput: TagInputComponent = this.injector.get(TagInputComponent);\n\n    /**\n     * @name _autocompleteItems\n     */\n    private _autocompleteItems: TagModel[] = [];\n\n    /**\n     * @name autocompleteItems\n     * @param items\n     */\n    public set autocompleteItems(items: TagModel[]) {\n        this._autocompleteItems = items;\n    }\n\n    /**\n     * @name autocompleteItems\n     * @desc array of items that will populate the autocomplete\n     */\n    @Input() public get autocompleteItems(): TagModel[] {\n        const items = this._autocompleteItems;\n\n        if (!items) {\n            return [];\n        }\n\n        return items.map((item: TagModel) => {\n            return typeof item === 'string' ? {\n                [this.displayBy]: item,\n                [this.identifyBy]: item\n            } : item;\n        });\n    }\n\n    constructor(private readonly injector: Injector) {}\n\n    /**\n     * @name ngOnInit\n     */\n    public ngOnInit(): void {\n        this.onItemClicked().subscribe((item: Ng2MenuItem) => {\n            this.requestAdding(item);\n        });\n\n        // reset itemsMatching array when the dropdown is hidden\n        this.onHide().subscribe(this.resetItems);\n\n        const DEBOUNCE_TIME = 200;\n        const KEEP_OPEN = this.keepOpen;\n\n        this.tagInput\n            .onTextChange\n            .asObservable()\n            .pipe(\n                debounceTime(DEBOUNCE_TIME),\n                filter((value: string) => {\n                    if (KEEP_OPEN === false) {\n                        return value.length > 0;\n                    }\n\n                    return true;\n                })\n            )\n            .subscribe(this.show);\n    }\n\n    /**\n     * @name updatePosition\n     */\n    public updatePosition(): void {\n        const position = this.tagInput.inputForm.getElementPosition();\n\n        this.dropdown.menu.updatePosition(position, this.dynamicUpdate);\n    }\n\n    /**\n     * @name isVisible\n     */\n    public get isVisible(): boolean {\n        return this.dropdown.menu.state.menuState.isVisible;\n    }\n\n    /**\n     * @name onHide\n     */\n    public onHide(): EventEmitter<Ng2Dropdown> {\n        return this.dropdown.onHide;\n    }\n\n    /**\n     * @name onItemClicked\n     */\n    public onItemClicked(): EventEmitter<string> {\n        return this.dropdown.onItemClicked;\n    }\n\n    /**\n     * @name selectedItem\n     */\n    public get selectedItem(): Ng2MenuItem {\n        return this.dropdown.menu.state.dropdownState.selectedItem;\n    }\n\n    /**\n     * @name state\n     */\n    public get state(): any {\n        return this.dropdown.menu.state;\n    }\n\n    /**\n     *\n     * @name show\n     */\n    public show = (): void => {\n        const maxItemsReached = this.tagInput.items.length === this.tagInput.maxItems;\n        const value = this.getFormValue();\n        const hasMinimumText = value.trim().length >= this.minimumTextLength;\n        const position = this.calculatePosition();\n        const items = this.getMatchingItems(value);\n        const hasItems = items.length > 0;\n        const isHidden = this.isVisible === false;\n        const showDropdownIfEmpty = this.showDropdownIfEmpty && hasItems && !value;\n        const isDisabled = this.tagInput.disable;\n\n        const shouldShow = isHidden && ((hasItems && hasMinimumText) || showDropdownIfEmpty);\n        const shouldHide = this.isVisible && !hasItems;\n\n        if (this.autocompleteObservable && hasMinimumText) {\n            return this.getItemsFromObservable(value);\n        }\n\n        if ((!this.showDropdownIfEmpty && !value) || maxItemsReached || isDisabled) {\n            return this.dropdown.hide();\n        }\n\n        this.setItems(items);\n\n        if (shouldShow) {\n            this.dropdown.show(position);\n        } else if (shouldHide) {\n            this.hide();\n        }\n    }\n\n    /**\n     * @name hide\n     */\n    public hide(): void {\n        this.resetItems();\n        this.dropdown.hide();\n    }\n\n    /**\n     * @name scrollListener\n     */\n    @HostListener('window:scroll')\n    public scrollListener(): void {\n        if (!this.isVisible || !this.dynamicUpdate) {\n            return;\n        }\n\n        this.updatePosition();\n    }\n\n    /**\n     * @name onWindowBlur\n     */\n    @HostListener('window:blur')\n    public onWindowBlur(): void {\n        this.dropdown.hide();\n    }\n\n    /**\n     * @name getFormValue\n     */\n    private getFormValue(): string {\n        const formValue = this.tagInput.formValue;\n        return formValue ? formValue.toString().trim() : '';\n    }\n\n    /**\n     * @name calculatePosition\n     */\n    private calculatePosition(): ClientRect {\n        return this.tagInput.inputForm.getElementPosition();\n    }\n\n    /**\n     * @name requestAdding\n     * @param item {Ng2MenuItem}\n     */\n    private requestAdding = async (item: Ng2MenuItem) => {\n        const tag = this.createTagModel(item);\n        await this.tagInput.onAddingRequested(true, tag).catch(() => {});\n    }\n\n    /**\n     * @name createTagModel\n     * @param item\n     */\n    private createTagModel(item: Ng2MenuItem): TagModel {\n        const display = typeof item.value === 'string' ? item.value : item.value[this.displayBy];\n        const value = typeof item.value === 'string' ? item.value : item.value[this.identifyBy];\n\n        return {\n            ...item.value,\n            [this.tagInput.displayBy]: display,\n            [this.tagInput.identifyBy]: value\n        };\n    }\n\n    /**\n     *\n     * @param value {string}\n     */\n    private getMatchingItems(value: string): TagModel[] {\n        if (!value && !this.showDropdownIfEmpty) {\n            return [];\n        }\n\n        const dupesAllowed = this.tagInput.allowDupes;\n\n        return this.autocompleteItems.filter((item: TagModel) => {\n            const hasValue = dupesAllowed ? false : this.tagInput.tags.some(tag => {\n                const identifyBy = this.tagInput.identifyBy;\n                const model = typeof tag.model === 'string' ? tag.model : tag.model[identifyBy];\n\n                return model === item[this.identifyBy];\n            });\n\n            return this.matchingFn(value, item) && (hasValue === false);\n        });\n    }\n\n    /**\n     * @name setItems\n     */\n    private setItems(items: TagModel[]): void {\n        this.items = items.slice(0, this.limitItemsTo || items.length);\n    }\n\n    /**\n     * @name resetItems\n     */\n    private resetItems = (): void => {\n        this.items = [];\n    }\n\n    /**\n     * @name populateItems\n     * @param data\n     */\n    private populateItems(data: any): TagInputDropdown {\n        this.autocompleteItems = data.map(item => {\n            return typeof item === 'string' ? {\n                [this.displayBy]: item,\n                [this.identifyBy]: item\n            } : item;\n        });\n\n        return this;\n    }\n\n    /**\n     * @name getItemsFromObservable\n     * @param text\n     */\n    private getItemsFromObservable = (text: string): void => {\n        this.setLoadingState(true);\n\n        const subscribeFn = (data: any[]) => {\n            // hide loading animation\n            this.setLoadingState(false)\n                // add items\n                .populateItems(data);\n\n            this.setItems(this.getMatchingItems(text));\n\n            if (this.items.length) {\n                this.dropdown.show(this.calculatePosition());\n            } else {\n                this.dropdown.hide();\n            }\n        };\n\n        this.autocompleteObservable(text)\n            .pipe(first())\n            .subscribe(subscribeFn, () => this.setLoadingState(false));\n    }\n\n    /**\n     * @name setLoadingState\n     * @param state\n     */\n    private setLoadingState(state: boolean): TagInputDropdown {\n        this.tagInput.isLoading = state;\n\n        return this;\n    }\n}\n","import {\n    Component,\n    Input\n} from '@angular/core';\n\n\nimport {\n    animate,\n    trigger,\n    style,\n    transition,\n    keyframes,\n    state\n} from '@angular/animations';\n\n@Component({\n    selector: 'tag-ripple',\n    styles: [`\n        :host {\n            width: 100%;\n            height: 100%;\n            left: 0;\n            overflow: hidden;\n            position: absolute;\n        }\n        \n        .tag-ripple {\n            background: rgba(0, 0, 0, 0.1);\n            top: 50%;\n            left: 50%;\n            height: 100%;\n            transform: translate(-50%, -50%);\n            position: absolute;\n        }\n    `],\n    template: `\n        <div class=\"tag-ripple\" [@ink]=\"state\"></div>\n    `,\n    animations: [\n        trigger('ink', [\n            state('none', style({width: 0, opacity: 0})),\n            transition('none => clicked', [\n                animate(300, keyframes([\n                    style({opacity: 1, offset: 0, width: '30%', borderRadius: '100%'}),\n                    style({opacity: 1, offset: 0.5, width: '50%'}),\n                    style({opacity: 0.5, offset: 1, width: '100%', borderRadius: '16px'})\n                ]))\n            ])\n        ])\n    ]\n})\nexport class TagRipple {\n    @Input() public state: string = 'none';\n}\n","import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    TemplateRef,\n    ElementRef,\n    HostListener,\n    HostBinding,\n    ViewChild,\n    ChangeDetectorRef,\n    Renderer2\n} from '@angular/core';\n\nimport { TagModel } from '../../core/accessor';\nimport { TagRipple } from '../tag/tag-ripple.component';\nimport { EventLike } from '../../core/helpers/event-like';\n\n// mocking navigator\nconst navigator = typeof window !== 'undefined' ? window.navigator : {\n    userAgent: 'Chrome',\n    vendor: 'Google Inc'\n};\n\nconst isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\n\n@Component({\n    selector: \"tag\",\n    templateUrl: \"./tag.template.html\",\n    styleUrls: [\"./tag-component.style.scss\"]\n})\nexport class TagComponent {\n    /**\n     * @name model {TagModel}\n     */\n    @Input()\n    public model: TagModel;\n\n    /**\n     * @name removable {boolean}\n     */\n    @Input()\n    public removable: boolean;\n\n    /**\n     * @name editable {boolean}\n     */\n    @Input()\n    public editable: boolean;\n\n    /**\n     * @name template {TemplateRef<any>}\n     */\n    @Input()\n    public template: TemplateRef<any>;\n\n    /**\n     * @name displayBy {string}\n     */\n    @Input()\n    public displayBy: string;\n\n    /**\n     * @name identifyBy {string}\n     */\n    @Input()\n    public identifyBy: string;\n\n    /**\n     * @name index {number}\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * @name hasRipple\n     */\n    @Input()\n    public hasRipple: boolean;\n\n    /**\n     * @name disabled\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * @name canAddTag\n     */\n    @Input()\n    public canAddTag: (tag: TagModel) => boolean;\n\n    /**\n     * @name onSelect\n     */\n    @Output()\n    public onSelect: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     */\n    @Output()\n    public onRemove: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onBlur\n     */\n    @Output()\n    public onBlur: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onKeyDown\n     */\n    @Output()\n    public onKeyDown: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     * @name onTagEdited\n     */\n    @Output()\n    public onTagEdited: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name readonly {boolean}\n     */\n    public get readonly(): boolean {\n        return typeof this.model !== \"string\" && this.model.readonly === true;\n    }\n\n    /**\n     * @name editing\n     */\n    public editing = false;\n\n    /**\n     * @name moving\n     */\n    @HostBinding(\"class.moving\")\n    public moving: boolean;\n\n    /**\n     * @name rippleState\n     */\n    public rippleState = \"none\";\n\n    /**\n     * @name ripple {TagRipple}\n     */\n    @ViewChild(TagRipple)\n    public ripple: TagRipple;\n\n    constructor(\n        public element: ElementRef,\n        public renderer: Renderer2,\n        private cdRef: ChangeDetectorRef\n    ) {}\n\n    /**\n     * @name select\n     */\n    public select($event?: MouseEvent): void {\n        if (this.readonly || this.disabled) {\n            return;\n        }\n\n        if ($event) {\n            $event.stopPropagation();\n        }\n\n        this.focus();\n\n        this.onSelect.emit(this.model);\n    }\n\n    /**\n     * @name remove\n     */\n    public remove($event: MouseEvent): void {\n        $event.stopPropagation();\n        this.onRemove.emit(this);\n    }\n\n    /**\n     * @name focus\n     */\n    public focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    public move(): void {\n        this.moving = true;\n    }\n\n    /**\n     * @name keydown\n     * @param event\n     */\n    @HostListener(\"keydown\", [\"$event\"])\n    public keydown(event: EventLike): void {\n        if (this.editing) {\n            if (event.keyCode === 13) {\n                return this.disableEditMode(event);\n            }\n        } else {\n            this.onKeyDown.emit({ event, model: this.model });\n        }\n    }\n\n    /**\n     * @name blink\n     */\n    public blink(): void {\n        const classList = this.element.nativeElement.classList;\n        classList.add(\"blink\");\n\n        setTimeout(() => classList.remove(\"blink\"), 50);\n    }\n\n    /**\n     * @name toggleEditMode\n     */\n    public toggleEditMode(): void {\n        if (this.editable) {\n            return this.editing ? undefined : this.activateEditMode();\n        }\n    }\n\n    /**\n     * @name onBlurred\n     * @param event\n     */\n    public onBlurred(event: any): void {\n        // Checks if it is editable first before handeling the onBlurred event in order to prevent\n        // a bug in IE where tags are still editable with onlyFromAutocomplete set to true\n        if (!this.editable) {\n            return;\n        }\n\n        this.disableEditMode();\n\n        const value: string = event.target.innerText;\n        const result =\n            typeof this.model === \"string\"\n                ? value\n                : { ...this.model, [this.displayBy]: value };\n\n        this.onBlur.emit(result);\n    }\n\n    /**\n     * @name getDisplayValue\n     * @param item\n     */\n    public getDisplayValue(item: TagModel): string {\n        return typeof item === \"string\" ? item : item[this.displayBy];\n    }\n\n    /**\n     * @desc returns whether the ripple is visible or not\n     * only works in Chrome\n     * @name isRippleVisible\n     */\n    public get isRippleVisible(): boolean {\n        return !this.readonly && !this.editing && isChrome && this.hasRipple;\n    }\n\n    /**\n     * @name disableEditMode\n     * @param $event\n     */\n    public disableEditMode($event?: EventLike): void {\n        const classList = this.element.nativeElement.classList;\n        const input = this.getContentEditableText();\n\n        this.editing = false;\n        classList.remove(\"tag--editing\");\n\n        if (!input) {\n            this.setContentEditableText(this.model);\n            return;\n        }\n\n        this.storeNewValue(input);\n        this.cdRef.detectChanges();\n\n        if ($event) {\n            $event.preventDefault();\n        }\n    }\n\n    /**\n     * @name isDeleteIconVisible\n     */\n    public isDeleteIconVisible(): boolean {\n        return (\n            !this.readonly && !this.disabled && this.removable && !this.editing\n        );\n    }\n\n    /**\n     * @name getContentEditableText\n     */\n    private getContentEditableText(): string {\n        const input = this.getContentEditable();\n\n        return input ? input.innerText.trim() : \"\";\n    }\n\n    /**\n     * @name setContentEditableText\n     * @param model\n     */\n    private setContentEditableText(model: TagModel) {\n        const input = this.getContentEditable();\n        const value = this.getDisplayValue(model);\n\n        input.innerText = value;\n    }\n\n    /**\n     * @name\n     */\n    private activateEditMode(): void {\n        const classList = this.element.nativeElement.classList;\n        classList.add('tag--editing');\n\n        this.editing = true;\n    }\n\n    /**\n     * @name storeNewValue\n     * @param input\n     */\n    private storeNewValue(input: string): void {\n        const exists = (tag: TagModel) => {\n            return typeof tag === 'string'\n                ? tag === input\n                : tag[this.displayBy] === input;\n        };\n\n        const hasId = () => {\n            return this.model[this.identifyBy] !== this.model[this.displayBy];\n        };\n\n        // if the value changed, replace the value in the model\n        if (exists(this.model)) {\n            return;\n        }\n\n        const model =\n            typeof this.model === 'string'\n                ? input\n                : {\n                      index: this.index,\n                      [this.identifyBy]: hasId()\n                          ? this.model[this.identifyBy]\n                          : input,\n                      [this.displayBy]: input\n                  };\n\n        if (this.canAddTag(model)) {\n            this.onTagEdited.emit({ tag: model, index: this.index });\n        } else {\n            this.setContentEditableText(this.model);\n        }\n    }\n\n    /**\n     * @name getContentEditable\n     */\n    private getContentEditable(): HTMLInputElement {\n        return this.element.nativeElement.querySelector('[contenteditable]');\n    }\n}\n","import {\n    animate,\n    trigger,\n    style,\n    transition,\n    keyframes,\n    state,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n/**\n * @name animations\n */\nexport const animations = [\n    trigger('animation', [\n        state('in', style({\n            opacity: 1\n        })),\n        state('out', style({\n            opacity: 0\n        })),\n        transition(':enter', [\n            animate(\"{{ enter }}\", keyframes([\n                style({opacity: 0, offset: 0, transform: 'translate(0px, 20px)'}),\n                style({opacity: 0.3, offset: 0.3, transform: 'translate(0px, -10px)'}),\n                style({opacity: 0.5, offset: 0.5, transform: 'translate(0px, 0px)'}),\n                style({opacity: 0.75, offset: 0.75, transform: 'translate(0px, 5px)'}),\n                style({opacity: 1, offset: 1, transform: 'translate(0px, 0px)'})\n            ]))\n        ]),\n        transition(':leave', [\n            animate(\"{{ leave }}\", keyframes([\n                style({opacity: 1, transform: 'translateX(0)', offset: 0}),\n                style({opacity: 1, transform: 'translateX(-15px)', offset: 0.7}),\n                style({opacity: 0, transform: 'translateX(100%)', offset: 1.0})\n            ]))\n        ])\n    ])\n];\n","// angular\nimport {\n    Component,\n    forwardRef,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    Renderer2,\n    ViewChild,\n    ViewChildren,\n    ContentChildren,\n    ContentChild,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    AfterViewInit,\n    Type\n} from '@angular/core';\n\nimport {\n    AsyncValidatorFn,\n    FormControl,\n    NG_VALUE_ACCESSOR,\n    ValidatorFn\n} from '@angular/forms';\n\n// rx\nimport { Observable } from 'rxjs';\nimport { debounceTime, filter, map, first} from 'rxjs/operators';\n\n// ng2-tag-input\nimport { TagInputAccessor, TagModel } from '../../core/accessor';\nimport { listen } from '../../core/helpers/listen';\nimport * as constants from '../../core/constants';\n\nimport { DragProvider, DraggedTag } from '../../core/providers/drag-provider';\nimport { OptionsProvider } from '../../core/providers/options-provider';\n\nimport { TagInputForm } from '../tag-input-form/tag-input-form.component';\nimport { TagInputDropdown } from '../dropdown/tag-input-dropdown.component';\nimport { TagComponent } from '../tag/tag.component';\n\nimport { animations } from './animations';\nimport { TagInputOptions } from '../../defaults';\n\n// angular universal hacks\n/* tslint:disable-next-line */\nconst DragEvent = (window as any).DragEvent;\n\nconst CUSTOM_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TagInputComponent),\n    multi: true\n};\n\nconst defaults: Type<TagInputOptions> = forwardRef(() => OptionsProvider.defaults.tagInput);\n\n@Component({\n    selector: 'tag-input',\n    providers: [CUSTOM_ACCESSOR],\n    styleUrls: ['./tag-input.style.scss'],\n    templateUrl: './tag-input.template.html',\n    animations\n})\nexport class TagInputComponent extends TagInputAccessor implements OnInit, AfterViewInit {\n    /**\n     * @name separatorKeys\n     * @desc keyboard keys with which a user can separate items\n     */\n    @Input() public separatorKeys: string[] = new defaults().separatorKeys;\n\n    /**\n     * @name separatorKeyCodes\n     * @desc keyboard key codes with which a user can separate items\n     */\n    @Input() public separatorKeyCodes: number[] = new defaults().separatorKeyCodes;\n\n    /**\n     * @name placeholder\n     * @desc the placeholder of the input text\n     */\n    @Input() public placeholder: string = new defaults().placeholder;\n\n    /**\n     * @name secondaryPlaceholder\n     * @desc placeholder to appear when the input is empty\n     */\n    @Input() public secondaryPlaceholder: string = new defaults().secondaryPlaceholder;\n\n    /**\n     * @name maxItems\n     * @desc maximum number of items that can be added\n     */\n    @Input() public maxItems: number = new defaults().maxItems;\n\n    /**\n     * @name validators\n     * @desc array of Validators that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public validators: ValidatorFn[] = new defaults().validators;\n\n    /**\n     * @name asyncValidators\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public asyncValidators: AsyncValidatorFn[] = new defaults().asyncValidators;\n\n    /**\n    * - if set to true, it will only possible to add items from the autocomplete\n    * @name onlyFromAutocomplete\n    */\n    @Input() public onlyFromAutocomplete = new defaults().onlyFromAutocomplete;\n\n    /**\n     * @name errorMessages\n     */\n    @Input() public errorMessages: { [key: string]: string } = new defaults().errorMessages;\n\n    /**\n     * @name theme\n     */\n    @Input() public theme: string = new defaults().theme;\n\n    /**\n     * @name onTextChangeDebounce\n     */\n    @Input() public onTextChangeDebounce = new defaults().onTextChangeDebounce;\n\n    /**\n     * - custom id assigned to the input\n     * @name id\n     */\n    @Input() public inputId = new defaults().inputId;\n\n    /**\n     * - custom class assigned to the input\n     */\n    @Input() public inputClass: string = new defaults().inputClass;\n\n    /**\n     * - option to clear text input when the form is blurred\n     * @name clearOnBlur\n     */\n    @Input() public clearOnBlur: boolean = new defaults().clearOnBlur;\n\n    /**\n     * - hideForm\n     * @name clearOnBlur\n     */\n    @Input() public hideForm: boolean = new defaults().hideForm;\n\n    /**\n     * @name addOnBlur\n     */\n    @Input() public addOnBlur: boolean = new defaults().addOnBlur;\n\n    /**\n     * @name addOnPaste\n     */\n    @Input() public addOnPaste: boolean = new defaults().addOnPaste;\n\n    /**\n     * - pattern used with the native method split() to separate patterns in the string pasted\n     * @name pasteSplitPattern\n     */\n    @Input() public pasteSplitPattern = new defaults().pasteSplitPattern;\n\n    /**\n     * @name blinkIfDupe\n     */\n    @Input() public blinkIfDupe = new defaults().blinkIfDupe;\n\n    /**\n     * @name removable\n     */\n    @Input() public removable = new defaults().removable;\n\n    /**\n     * @name editable\n     */\n    @Input() public editable: boolean = new defaults().editable;\n\n    /**\n     * @name allowDupes\n     */\n    @Input() public allowDupes = new defaults().allowDupes;\n\n    /**\n     * @description if set to true, the newly added tags will be added as strings, and not objects\n     * @name modelAsStrings\n     */\n    @Input() public modelAsStrings = new defaults().modelAsStrings;\n\n    /**\n     * @name trimTags\n     */\n    @Input() public trimTags = new defaults().trimTags;\n\n    /**\n     * @name inputText\n     */\n    @Input() public get inputText(): string {\n        return this.inputTextValue;\n    }\n\n    /**\n     * @name ripple\n     */\n    @Input() public ripple: boolean = new defaults().ripple;\n\n    /**\n     * @name tabindex\n     * @desc pass through the specified tabindex to the input\n     */\n    @Input() public tabindex: string = new defaults().tabIndex;\n\n    /**\n     * @name disable\n     */\n    @Input() public disable: boolean = new defaults().disable;\n\n    /**\n     * @name dragZone\n     */\n    @Input() public dragZone: string = new defaults().dragZone;\n\n    /**\n     * @name onRemoving\n     */\n    @Input() public onRemoving = new defaults().onRemoving;\n\n    /**\n     * @name onAdding\n     */\n    @Input() public onAdding = new defaults().onAdding;\n\n    /**\n     * @name animationDuration\n     */\n    @Input() public animationDuration = new defaults().animationDuration;\n\n    /**\n     * @name onAdd\n     * @desc event emitted when adding a new item\n     */\n    @Output() public onAdd = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     * @desc event emitted when removing an existing item\n     */\n    @Output() public onRemove = new EventEmitter<TagModel>();\n\n    /**\n     * @name onSelect\n     * @desc event emitted when selecting an item\n     */\n    @Output() public onSelect = new EventEmitter<TagModel>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is focused\n     */\n    @Output() public onFocus = new EventEmitter<string>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is blurred\n     */\n    @Output() public onBlur = new EventEmitter<string>();\n\n    /**\n     * @name onTextChange\n     * @desc event emitted when the input value changes\n     */\n    @Output() public onTextChange = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when text is pasted in the form\n     * @name onPaste\n     */\n    @Output() public onPaste = new EventEmitter<string>();\n\n    /**\n     * - output triggered when tag entered is not valid\n     * @name onValidationError\n     */\n    @Output() public onValidationError = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when tag is edited\n     * @name onTagEdited\n     */\n    @Output() public onTagEdited = new EventEmitter<TagModel>();\n\n    /**\n     * @name dropdown\n     */\n    @ContentChild(TagInputDropdown) public dropdown: TagInputDropdown;\n\n    /**\n     * @name template\n     * @desc reference to the template if provided by the user\n     */\n    @ContentChildren(TemplateRef, { descendants: false }) public templates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @name inputForm\n     */\n    @ViewChild(TagInputForm) public inputForm: TagInputForm;\n\n    /**\n     * @name selectedTag\n     * @desc reference to the current selected tag\n     */\n    public selectedTag: TagModel | undefined;\n\n    /**\n     * @name isLoading\n     */\n    public isLoading = false;\n\n    /**\n     * @name inputText\n     * @param text\n     */\n    public set inputText(text: string) {\n        this.inputTextValue = text;\n        this.inputTextChange.emit(text);\n    }\n\n    /**\n     * @name tags\n     * @desc list of Element items\n     */\n    @ViewChildren(TagComponent) public tags: QueryList<TagComponent>;\n\n    /**\n     * @name listeners\n     * @desc array of events that get fired using @fireEvents\n     */\n    private listeners = {\n        [constants.KEYDOWN]: <{ (fun): any }[]>[],\n        [constants.KEYUP]: <{ (fun): any }[]>[]\n    };\n\n    /**\n     * @description emitter for the 2-way data binding inputText value\n     * @name inputTextChange\n     */\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\n\n    /**\n     * @description private variable to bind get/set\n     * @name inputTextValue\n     */\n    public inputTextValue = '';\n\n    /**\n     * @desc removes the tab index if it is set - it will be passed through to the input\n     * @name tabindexAttr\n     */\n    @HostBinding('attr.tabindex')\n    public get tabindexAttr(): string {\n        return this.tabindex !== '' ? '-1' : '';\n    }\n\n    /**\n     * @name animationMetadata\n     */\n    public animationMetadata: { value: string, params: object };\n\n    public errors: string[] = [];\n\n    public isProgressBarVisible$: Observable<boolean>;\n\n    constructor(private readonly renderer: Renderer2,\n                public readonly dragProvider: DragProvider) {\n        super();\n    }\n\n    /**\n     * @name ngAfterViewInit\n     */\n    public ngAfterViewInit(): void {\n        // set up listeners\n\n        this.setUpKeypressListeners();\n        this.setupSeparatorKeysListener();\n        this.setUpInputKeydownListeners();\n\n        if (this.onTextChange.observers.length) {\n            this.setUpTextChangeSubscriber();\n        }\n\n        // if clear on blur is set to true, subscribe to the event and clear the text's form\n        if (this.clearOnBlur || this.addOnBlur) {\n            this.setUpOnBlurSubscriber();\n        }\n\n        // if addOnPaste is set to true, register the handler and add items\n        if (this.addOnPaste) {\n            this.setUpOnPasteListener();\n        }\n\n        const statusChanges$ = this.inputForm.form.statusChanges;\n\n        statusChanges$.pipe(\n            filter((status: string) => status !== 'PENDING')\n        ).subscribe(() => {\n            this.errors = this.inputForm.getErrorMessages(this.errorMessages);\n        });\n\n        this.isProgressBarVisible$ = statusChanges$.pipe(\n            map((status: string) => {\n                return status === 'PENDING' || this.isLoading;\n            })\n        );\n\n        // if hideForm is set to true, remove the input\n        if (this.hideForm) {\n            this.inputForm.destroy();\n        }\n    }\n\n    /**\n     * @name ngOnInit\n     */\n    public ngOnInit(): void {\n        // if the number of items specified in the model is > of the value of maxItems\n        // degrade gracefully and let the max number of items to be the number of items in the model\n        // though, warn the user.\n        const hasReachedMaxItems = this.maxItems !== undefined &&\n            this.items &&\n            this.items.length > this.maxItems;\n\n        if (hasReachedMaxItems) {\n            this.maxItems = this.items.length;\n            console.warn(constants.MAX_ITEMS_WARNING);\n        }\n\n        // Setting editable to false to fix problem with tags in IE still being editable when\n        // onlyFromAutocomplete is true\n        this.editable = this.onlyFromAutocomplete ? false : this.editable;\n\n        this.setAnimationMetadata();\n    }\n\n    /**\n     * @name onRemoveRequested\n     * @param tag\n     * @param index\n     */\n    public onRemoveRequested(tag: TagModel, index: number): Promise<TagModel> {\n        return new Promise(resolve => {\n            const subscribeFn = (model: TagModel) => {\n                this.removeItem(model, index);\n                resolve(tag);\n            };\n\n            this.onRemoving ?\n                this.onRemoving(tag)\n                    .pipe(first())\n                    .subscribe(subscribeFn) : subscribeFn(tag);\n        });\n    }\n\n    /**\n     * @name onAddingRequested\n     * @param fromAutocomplete {boolean}\n     * @param tag {TagModel}\n     * @param index? {number}\n     * @param giveupFocus? {boolean}\n     */\n    public onAddingRequested(fromAutocomplete: boolean, tag: TagModel, index?: number, giveupFocus?: boolean): Promise<TagModel> {\n        return new Promise((resolve, reject) => {\n            const subscribeFn = (model: TagModel) => {\n                return this\n                    .addItem(fromAutocomplete, model, index, giveupFocus)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            return this.onAdding ?\n                this.onAdding(tag)\n                    .pipe(first())\n                    .subscribe(subscribeFn, reject) : subscribeFn(tag);\n        });\n    }\n\n    /**\n     * @name appendTag\n     * @param tag {TagModel}\n     */\n    public appendTag = (tag: TagModel, index = this.items.length): void => {\n        const items = this.items;\n        const model = this.modelAsStrings ? tag[this.identifyBy] : tag;\n\n        this.items = [\n            ...items.slice(0, index),\n            model,\n            ...items.slice(index, items.length)\n        ];\n    }\n\n    /**\n     * @name createTag\n     * @param model\n     */\n    public createTag = (model: TagModel): TagModel => {\n        const trim = (val: TagModel, key: string): TagModel => {\n            return typeof val === 'string' ? val.trim() : val[key];\n        };\n\n        return {\n            ...typeof model !== 'string' ? model : {},\n            [this.displayBy]: this.trimTags ? trim(model, this.displayBy) : model,\n            [this.identifyBy]: this.trimTags ? trim(model, this.identifyBy) : model\n        };\n    }\n\n    /**\n     * @name selectItem\n     * @desc selects item passed as parameter as the selected tag\n     * @param item\n     * @param emit\n     */\n    public selectItem(item: TagModel | undefined, emit = true): void {\n        const isReadonly = item && typeof item !== 'string' && item.readonly;\n\n        if (isReadonly || this.selectedTag === item) {\n            return;\n        }\n\n        this.selectedTag = item;\n\n        if (emit) {\n            this.onSelect.emit(item);\n        }\n    }\n\n    /**\n     * @name fireEvents\n     * @desc goes through the list of the events for a given eventName, and fires each of them\n     * @param eventName\n     * @param $event\n     */\n    public fireEvents(eventName: string, $event?): void {\n        this.listeners[eventName].forEach(listener => listener.call(this, $event));\n    }\n\n    /**\n     * @name handleKeydown\n     * @desc handles action when the user hits a keyboard key\n     * @param data\n     */\n    public handleKeydown(data: any): void {\n        const event = data.event;\n        const key = event.keyCode || event.which;\n        const shiftKey = event.shiftKey || false;\n\n        switch (constants.KEY_PRESS_ACTIONS[key]) {\n            case constants.ACTIONS_KEYS.DELETE:\n                if (this.selectedTag && this.removable) {\n                    const index = this.items.indexOf(this.selectedTag);\n                    this.onRemoveRequested(this.selectedTag, index);\n                }\n                break;\n\n            case constants.ACTIONS_KEYS.SWITCH_PREV:\n                this.moveToTag(data.model, constants.PREV);\n                break;\n\n            case constants.ACTIONS_KEYS.SWITCH_NEXT:\n                this.moveToTag(data.model, constants.NEXT);\n                break;\n\n            case constants.ACTIONS_KEYS.TAB:\n                if (shiftKey) {\n                    if (this.isFirstTag(data.model)) {\n                        return;\n                    }\n\n                    this.moveToTag(data.model, constants.PREV);\n                } else {\n                    if (this.isLastTag(data.model) && (this.disable || this.maxItemsReached)) {\n                        return;\n                    }\n\n                    this.moveToTag(data.model, constants.NEXT);\n                }\n                break;\n\n            default:\n                return;\n        }\n\n        // prevent default behaviour\n        event.preventDefault();\n    }\n\n    public async onFormSubmit() {\n        try {\n            await this.onAddingRequested(false, this.formValue);\n        } catch {\n            return;\n        }\n    }\n\n    /**\n     * @name setInputValue\n     * @param value\n     */\n    public setInputValue(value: string, emitEvent = true): void {\n        const control = this.getControl();\n\n        // update form value with the transformed item\n        control.setValue(value, { emitEvent });\n    }\n\n    /**\n     * @name getControl\n     */\n    private getControl(): FormControl {\n        return this.inputForm.value as FormControl;\n    }\n\n    /**\n     * @name focus\n     * @param applyFocus\n     * @param displayAutocomplete\n     */\n    public focus(applyFocus = false, displayAutocomplete = false): void {\n        if (this.dragProvider.getState('dragging')) {\n            return;\n        }\n\n        this.selectItem(undefined, false);\n\n        if (applyFocus) {\n            this.inputForm.focus();\n            this.onFocus.emit(this.formValue);\n        }\n    }\n\n    /**\n     * @name blur\n     */\n    public blur(): void {\n        this.onTouched();\n\n        this.onBlur.emit(this.formValue);\n    }\n\n    /**\n     * @name hasErrors\n     */\n    public hasErrors(): boolean {\n        return this.inputForm && this.inputForm.hasErrors();\n    }\n\n    /**\n     * @name isInputFocused\n     */\n    public isInputFocused(): boolean {\n        return this.inputForm && this.inputForm.isInputFocused();\n    }\n\n    /**\n     * - this is the one way I found to tell if the template has been passed and it is not\n     * the template for the menu item\n     * @name hasCustomTemplate\n     */\n    public hasCustomTemplate(): boolean {\n        const template = this.templates ? this.templates.first : undefined;\n        const menuTemplate = this.dropdown && this.dropdown.templates ?\n            this.dropdown.templates.first : undefined;\n\n        return Boolean(template && template !== menuTemplate);\n    }\n\n    /**\n     * @name maxItemsReached\n     */\n    public get maxItemsReached(): boolean {\n        return this.maxItems !== undefined &&\n            this.items.length >= this.maxItems;\n    }\n\n    /**\n     * @name formValue\n     */\n    public get formValue(): string {\n        const form = this.inputForm.value;\n\n        return form ? form.value : '';\n    }\n\n    /**3\n     * @name onDragStarted\n     * @param event\n     * @param index\n     */\n    public onDragStarted(event: DragEvent, tag: TagModel, index: number): void {\n        event.stopPropagation();\n\n        const item = { zone: this.dragZone, tag, index } as DraggedTag;\n\n        this.dragProvider.setSender(this);\n        this.dragProvider.setDraggedItem(event, item);\n        this.dragProvider.setState({dragging: true, index});\n    }\n\n    /**\n     * @name onDragOver\n     * @param event\n     */\n    public onDragOver(event: DragEvent, index?: number): void {\n        this.dragProvider.setState({dropping: true});\n        this.dragProvider.setReceiver(this);\n\n        event.preventDefault();\n    }\n\n    /**\n     * @name onTagDropped\n     * @param event\n     * @param index\n     */\n    public onTagDropped(event: DragEvent, index?: number): void {\n        const item = this.dragProvider.getDraggedItem(event);\n\n        if (!item || item.zone !== this.dragZone) {\n            return;\n        }\n\n        this.dragProvider.onTagDropped(item.tag, item.index, index);\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    /**\n     * @name isDropping\n     */\n    public isDropping(): boolean {\n        const isReceiver = this.dragProvider.receiver === this;\n        const isDropping = this.dragProvider.getState('dropping');\n\n        return Boolean(isReceiver && isDropping);\n    }\n\n    /**\n     * @name onTagBlurred\n     * @param changedElement {TagModel}\n     * @param index {number}\n     */\n    public onTagBlurred(changedElement: TagModel, index: number): void {\n        this.items[index] = changedElement;\n        this.blur();\n    }\n\n    /**\n     * @name trackBy\n     * @param items\n     */\n    public trackBy(index: number, item: TagModel): string {\n        return item[this.identifyBy];\n    }\n\n    /**\n     * @name updateEditedTag\n     * @param tag\n     */\n    public updateEditedTag({tag, index}: {tag: TagModel, index: number}): void {\n        this.onTagEdited.emit(tag);\n    }\n\n    /**\n     *\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    public isTagValid = (tag: TagModel, fromAutocomplete = false): boolean => {\n        const selectedItem = this.dropdown ? this.dropdown.selectedItem : undefined;\n        const value = this.getItemDisplay(tag).trim();\n\n        if (selectedItem && !fromAutocomplete || !value) {\n            return false;\n        }\n\n        const dupe = this.findDupe(tag, fromAutocomplete);\n\n        // if so, give a visual cue and return false\n        if (!this.allowDupes && dupe && this.blinkIfDupe) {\n            const model = this.tags.find(item => {\n                return this.getItemValue(item.model) === this.getItemValue(dupe);\n            });\n\n            if (model) {\n                model.blink();\n            }\n        }\n\n        const isFromAutocomplete = fromAutocomplete && this.onlyFromAutocomplete;\n\n        const assertions = [\n            // 1. there must be no dupe OR dupes are allowed\n            !dupe || this.allowDupes,\n\n            // 2. check max items has not been reached\n            !this.maxItemsReached,\n\n            // 3. check item comes from autocomplete or onlyFromAutocomplete is false\n            ((isFromAutocomplete) || !this.onlyFromAutocomplete)\n        ];\n\n        return assertions.filter(Boolean).length === assertions.length;\n    }\n\n    /**\n     * @name moveToTag\n     * @param item\n     * @param direction\n     */\n    private moveToTag(item: TagModel, direction: string): void {\n        const isLast = this.isLastTag(item);\n        const isFirst = this.isFirstTag(item);\n        const stopSwitch = (direction === constants.NEXT && isLast) ||\n            (direction === constants.PREV && isFirst);\n\n        if (stopSwitch) {\n            this.focus(true);\n            return;\n        }\n\n        const offset = direction === constants.NEXT ? 1 : -1;\n        const index = this.getTagIndex(item) + offset;\n        const tag = this.getTagAtIndex(index);\n\n        return tag.select.call(tag);\n    }\n\n    /**\n     * @name isFirstTag\n     * @param item {TagModel}\n     */\n    private isFirstTag(item: TagModel): boolean {\n        return this.tags.first.model === item;\n    }\n\n    /**\n     * @name isLastTag\n     * @param item {TagModel}\n     */\n    private isLastTag(item: TagModel): boolean {\n        return this.tags.last.model === item;\n    }\n\n    /**\n     * @name getTagIndex\n     * @param item\n     */\n    private getTagIndex(item: TagModel): number {\n        const tags = this.tags.toArray();\n\n        return tags.findIndex(tag => tag.model === item);\n    }\n\n    /**\n     * @name getTagAtIndex\n     * @param index\n     */\n    private getTagAtIndex(index: number) {\n        const tags = this.tags.toArray();\n\n        return tags[index];\n    }\n\n    /**\n     * @name removeItem\n     * @desc removes an item from the array of the model\n     * @param tag {TagModel}\n     * @param index {number}\n     */\n    private removeItem(tag: TagModel, index: number): void {\n        this.items = this.getItemsWithout(index);\n\n        // if the removed tag was selected, set it as undefined\n        if (this.selectedTag === tag) {\n            this.selectItem(undefined, false);\n        }\n\n        // focus input\n        this.focus(true, false);\n\n        // emit remove event\n        this.onRemove.emit(tag);\n    }\n\n    /**\n     * @name addItem\n     * @desc adds the current text model to the items array\n     * @param fromAutocomplete {boolean}\n     * @param item {TagModel}\n     * @param index? {number}\n     * @param giveupFocus? {boolean}\n     */\n    private addItem(fromAutocomplete = false, item: TagModel, index?: number, giveupFocus?: boolean): Promise<TagModel> {\n        const display = this.getItemDisplay(item);\n        const tag = this.createTag(item);\n\n        if (fromAutocomplete) {\n            this.setInputValue(this.getItemValue(item, true));\n        }\n\n        return new Promise((resolve, reject) => {\n            /**\n             * @name reset\n             */\n            const reset = (): void => {\n                // reset control and focus input\n                this.setInputValue('');\n\n                if (giveupFocus) {\n                    this.focus(false, false);\n                } else {\n                    // focus input\n                    this.focus(true, false);\n                }\n\n                resolve(display);\n            };\n\n            const appendItem = (): void => {\n                this.appendTag(tag, index);\n\n                // emit event\n                this.onAdd.emit(tag);\n\n                if (!this.dropdown) {\n                    return;\n                }\n\n                this.dropdown.hide();\n\n                if (this.dropdown.showDropdownIfEmpty) {\n                    this.dropdown.show();\n                }\n            };\n\n            const status = this.inputForm.form.status;\n            const isTagValid = this.isTagValid(tag, fromAutocomplete);\n\n            const onValidationError = () => {\n                this.onValidationError.emit(tag);\n                return reject();\n            };\n\n            if (status === 'VALID' && isTagValid) {\n                appendItem();\n                return reset();\n            }\n\n            if (status === 'INVALID' || !isTagValid) {\n                reset();\n                return onValidationError();\n            }\n\n            if (status === 'PENDING') {\n                const statusUpdate$ = this.inputForm.form.statusChanges;\n\n                return statusUpdate$\n                    .pipe(\n                        filter(statusUpdate => statusUpdate !== 'PENDING'),\n                        first()\n                    )\n                    .subscribe((statusUpdate) => {\n                        if (statusUpdate === 'VALID' && isTagValid) {\n                            appendItem();\n                            resolve();\n                        } else {\n                            onValidationError();\n                        }\n                });\n            }\n        });\n    }\n\n    /**\n     * @name setupSeparatorKeysListener\n     */\n    private setupSeparatorKeysListener(): void {\n        const useSeparatorKeys = this.separatorKeyCodes.length > 0 || this.separatorKeys.length > 0;\n        const listener = ($event) => {\n            const hasKeyCode = this.separatorKeyCodes.indexOf($event.keyCode) >= 0;\n            const hasKey = this.separatorKeys.indexOf($event.key) >= 0;\n            // the keyCode of keydown event is 229 when IME is processing the key event.\n            const isIMEProcessing = $event.keyCode === 229;\n\n            if (hasKeyCode || (hasKey && !isIMEProcessing)) {\n                $event.preventDefault();\n                this.onAddingRequested(false, this.formValue)\n                    .catch(() => {});\n            }\n        };\n\n        listen.call(this, constants.KEYDOWN, listener, useSeparatorKeys);\n    }\n\n    /**\n     * @name setUpKeypressListeners\n     */\n    private setUpKeypressListeners(): void {\n        const listener = ($event) => {\n            const isCorrectKey = $event.keyCode === 37 || $event.keyCode === 8;\n\n            if (isCorrectKey &&\n                !this.formValue &&\n                this.items.length) {\n                this.tags.last.select.call(this.tags.last);\n            }\n        };\n\n        // setting up the keypress listeners\n        listen.call(this, constants.KEYDOWN, listener);\n    }\n\n    /**\n     * @name setUpKeydownListeners\n     */\n    private setUpInputKeydownListeners(): void {\n        this.inputForm.onKeydown.subscribe(event => {\n            this.fireEvents('keydown', event);\n\n            if (event.key === 'Backspace' && this.formValue.trim() === '') {\n                event.preventDefault();\n            }\n        });\n    }\n\n    /**\n     * @name setUpOnPasteListener\n     */\n    private setUpOnPasteListener() {\n        const input = this.inputForm.input.nativeElement;\n\n        // attach listener to input\n        this.renderer.listen(input, 'paste', (event) => {\n            this.onPasteCallback(event);\n\n            event.preventDefault();\n            return true;\n        });\n    }\n\n    /**\n     * @name setUpTextChangeSubscriber\n     */\n    private setUpTextChangeSubscriber(): void {\n        this.inputForm.form\n            .valueChanges\n            .pipe(\n                debounceTime(this.onTextChangeDebounce)\n            )\n            .subscribe((value: {item: string}) => {\n                this.onTextChange.emit(value.item);\n            });\n    }\n\n    /**\n     * @name setUpOnBlurSubscriber\n     */\n    private setUpOnBlurSubscriber(): void {\n        const filterFn = (): boolean => {\n            const isVisible = this.dropdown && this.dropdown.isVisible;\n            return !isVisible && !!this.formValue;\n        };\n\n        this.inputForm\n            .onBlur\n            .pipe(\n                debounceTime(100),\n                filter(filterFn)\n            )\n            .subscribe(() => {\n                const reset = () => this.setInputValue('');\n\n                if (this.addOnBlur) {\n                    return this\n                        .onAddingRequested(false, this.formValue, undefined, true)\n                        .then(reset)\n                        .catch(reset);\n                }\n\n                reset();\n            });\n    }\n\n    /**\n     * @name findDupe\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    private findDupe(tag: TagModel, isFromAutocomplete: boolean): TagModel | undefined {\n        const identifyBy = isFromAutocomplete ? this.dropdown.identifyBy : this.identifyBy;\n        const id = tag[identifyBy];\n\n        return this.items.find(item => this.getItemValue(item) === id);\n    }\n\n    /**\n     * @name onPasteCallback\n     * @param data\n     */\n    private onPasteCallback = async (data: ClipboardEvent) => {\n        interface IEWindow extends Window {\n            clipboardData: DataTransfer;\n        }\n\n        const getText = (): string => {\n            const isIE = Boolean((window as IEWindow).clipboardData);\n            const clipboardData = isIE ? (\n                (window as IEWindow).clipboardData\n            ) : data.clipboardData;\n            const type = isIE ? 'Text' : 'text/plain';\n\n            return clipboardData.getData(type) || '';\n        };\n\n        const text = getText();\n\n        const requests = text\n            .split(this.pasteSplitPattern)\n            .map(item => {\n                const tag = this.createTag(item);\n                this.setInputValue(tag[this.displayBy]);\n                return this.onAddingRequested(false, tag);\n            });\n\n        const resetInput = () => setTimeout(() => this.setInputValue(''), 50);\n\n        Promise.all(requests).then(() => {\n            this.onPaste.emit(text);\n            resetInput();\n       })\n       .catch(resetInput);\n    }\n\n    /**\n     * @name setAnimationMetadata\n     */\n    private setAnimationMetadata(): void {\n        this.animationMetadata = {\n            value: 'in',\n            params: {...this.animationDuration}\n        };\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'delete-icon',\n    templateUrl: './icon.html',\n    styleUrls: ['./icon.scss']\n})\nexport class DeleteIconComponent {}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule, FormsModule, COMPOSITION_BUFFER_MODE } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Ng2DropdownModule } from 'ng2-material-dropdown';\nimport { HighlightPipe } from './core/pipes/highlight.pipe';\nimport { DragProvider } from './core/providers/drag-provider';\nimport { OptionsProvider, Options } from './core/providers/options-provider';\nimport { TagInputComponent } from './components/tag-input/tag-input';\nimport { DeleteIconComponent } from './components/icon/icon';\nimport { TagInputForm } from './components/tag-input-form/tag-input-form.component';\nimport { TagComponent } from './components/tag/tag.component';\nimport { TagInputDropdown } from './components/dropdown/tag-input-dropdown.component';\nimport { TagRipple } from './components/tag/tag-ripple.component';\n\nconst optionsProvider = new OptionsProvider();\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        FormsModule,\n        Ng2DropdownModule\n    ],\n    declarations: [\n        TagInputComponent,\n        DeleteIconComponent,\n        TagInputForm,\n        TagComponent,\n        HighlightPipe,\n        TagInputDropdown,\n        TagRipple\n    ],\n    exports: [\n        TagInputComponent,\n        DeleteIconComponent,\n        TagInputForm,\n        TagComponent,\n        HighlightPipe,\n        TagInputDropdown,\n        TagRipple\n    ],\n    providers: [\n        DragProvider,\n        { provide: COMPOSITION_BUFFER_MODE, useValue: false },\n    ]\n})\nexport class TagInputModule {\n    /**\n     * @name withDefaults\n     * @param options {Options}\n     */\n    public static withDefaults(options: Options): void {\n        optionsProvider.setOptions(options);\n    }\n}\n"]}